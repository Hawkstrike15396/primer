# Visualization {#sec-visualization}

```{r}
#| label: hidden-libraries
#| include: false
#| message: false
#| echo: false
#| warning: false

library(tidyverse)
library(ggthemes)
library(gapminder)
library(plotly)
```

*Everyone loves visualizations.*

## Overview

Visualization is a major part of any real world data science project. Chapters 1 through 12 of [*R for Data Science (2e)*](https://r4ds.hadley.nz/) by Hadley Wickham, Mine Ã‡etinkaya-Rundel, and Garrett Grolemund provide a good overview of these issues. Read those chapters and complete the associated tutorials from the [**r4ds.tutorials**]() package.

Once you have read those chapters, and completed the associated tutorials, you will be able to create graphics like this one with your data. Join us on the journey.

<!-- Consider swapping out current animation to use this instead: https://github.com/jschoeley/de0anim That is a slick animation! -->


<!-- The data as provided by 538 has changed over time. Recently, I have had to download the Trump and Biden data separately, and then combine them by hand as when located in the 01-visualization/data directory like so: 

$ cat app* > presidential_approval.csv 

The original files are always named approval_pollist.csv. You have to navigate to a president's page in order to get his data. Theoretically, the next time we download this, we only need to get Biden's updated data. But I bet that they recreate the historical data each time they fix the model, so we ought to grab both sets. Might be nice to actually download the data each time we re-render the chapter, but not today.

Then we need to clean the data in order to make plotting easier. Note that this requires a bunch of changes from the previous version since we are plotting almost two years of data, rather than merely the first 100 days. -->


```{r}
#| message: false
#| echo: false
#| warning: false

# president_data <- read_csv("01-visualization/data/presidential_approval.csv",
#                            show_col_types = FALSE) |> 
#   select(president, enddate, approve) |> 
#   drop_na() |> 
  
  # This dating manipulation needs to be redone
  
  # mutate(enddate = lubridate::mdy(enddate),
  #        enddate = lubridate::yday(enddate))

```


```{r}
#| message: false
#| echo: false
#| warning: false

president_data <- read_csv("01-visualization/data/president_approval.csv",
                           show_col_types = FALSE) |>
  pivot_longer(names_to = "approval_type",
               values_to = "rate",
               cols = c(-president, -enddate)) |> 
  mutate(enddate = lubridate::mdy(enddate),
         enddate = lubridate::yday(enddate),
         enddate = as.integer(enddate - 20))

# Data is from 538, this is the data for the first 100 days of both Biden's and
# Trump's presidency. Changed the columns to date format, but also bc the term
# starts on January 20th instead of January 1st I needed to subtract 20 days to
# make sure January 20 was counted as "Day 1"

hundred_days_p <- president_data |>
  ggplot(mapping = aes(x = enddate,
                       y = rate,
                       color = approval_type)) +
   facet_wrap(~ president) +
   geom_point(alpha = 0.1,
              size = 0.5) +
   geom_smooth(method = "gam",
               formula = y ~ s(x, bs = "cs")) +
   coord_cartesian(ylim = c(30, 60)) +
   theme_fivethirtyeight() +
   labs(title = "Approval Ratings During the First Hundred Days",
        subtitle = "Both recent presidents had climbing disapproval ratings.",
        x = NULL,
        y = NULL,
        color = NULL,
        caption = "Source: FiveThirtyEight Data")

hundred_days_p
```




## Comics



```{r}
#| echo: false

knitr::include_graphics("https://imgs.xkcd.com/comics/decline.png")
```



## Going further

There are so many more plots you can make with R that we have not shown you yet. For example, you can create cool animations with the *gganimate* package:

```{r}
#| echo: false
#| cache: true

library(gganimate)

gapminder_p <- gapminder |>
  filter(continent != "Oceania") |>
  ggplot(aes(gdpPercap, lifeExp, color = continent)) +
    geom_point(show.legend = FALSE, alpha = 0.7) +
    facet_wrap(~continent, nrow = 1) +
    scale_size(range = c(2, 12)) +
    scale_x_log10() +
    labs(subtitle = "Life Expectancy and GDP per Capita (1952-2007)",
         x = "GDP per Capita, USD",
         y = "Life Expectancy, Years") +
    theme_linedraw() +
    transition_time(year) +
    labs(title = "Year: {frame_time}") +
    shadow_wake(wake_length = 0.1, alpha = FALSE)

gapminder_p
```

You can make your plots interactive, using the **plotly** package: 

```{r}
#| echo: false

gapminder_plot <- gapminder |>
  filter(continent != "Oceania") |>
  ggplot(aes(gdpPercap, lifeExp, color = continent)) +
    geom_point(alpha = 0.2, size = 0.5) +
    geom_smooth(method = "loess",
                formula = y ~ x,
                se = TRUE) +
    facet_wrap(~continent, nrow = 1) +
    labs(title = "Life Expectancy and GDP per Capita",
         subtitle = "Connection between GDP and life expectancy is weakest in Africa",
         x = "GDP per Capita",
         y = "Life Expectancy") +
    scale_x_log10(breaks = c(500, 5000, 50000),
                  labels = scales::dollar_format(accuracy = 1)) +
    theme_linedraw() +
    theme(legend.position = "none")

gapminder_plotly <- ggplotly(gapminder_plot)

gapminder_plotly
```

You can also create maps from census data, like this plot below.

```{r}
#| echo: false
#| message: false

library(tidycensus)
library(tigris)
options(tigris_use_cache = TRUE)

# source of map: https://walker-data.com/census-r/mapping-census-data-with-r.html#using-geometry-in-tidycensus

# dc_income <- get_acs(
#   geography = "tract", 
#   variables = "B19013_001",
#   state = "DC", 
#   geometry = TRUE)
# write_rds(x = dc_income, file = "01-visualization/data/dc_income.rds")

dc_income <- read_rds("01-visualization/data/dc_income.rds")

dc_income_map_p <- ggplot(data = dc_income,
       mapping = aes(fill = estimate)) +
  geom_sf() +
  scale_fill_distiller(palette = "RdPu", 
                       direction = 1) +
  theme_void() +
  labs(title = "Median Household Income by Tract in Washington, DC",
       fill = "USD ($)",
       caption = "Data: US Census Data")

dc_income_map_p

```


## Summary

*Tibbles are rectangular stores of data. They are a specific type of data frame, so we will use both terms interchangeably.*

*You need to practice every day.* 

*Do not use pie charts.*

*Shield my eyes from your ugly messages and warning.*

*Each step in the pipe starts with a tibble and then, once it is done, usually produces a tibble. It is tibbles all the way down!*

Recall the plot we began the chapter with:


```{r}
#| echo: false

hundred_days_p
```

You now know enough to make plots like this by yourself.

A beautiful plot is just a collection of steps, each simple enough on its own. We have taught you (some of) these steps. Time to start walking on your own.


